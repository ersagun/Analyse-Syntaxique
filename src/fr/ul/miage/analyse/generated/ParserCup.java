
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 25 21:20:36 CEST 2015
//----------------------------------------------------

package fr.ul.miage.analyse.generated;

import TDS.*;
import AST.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 25 21:20:36 CEST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\031\003\000\002\002\004\000\002\024" +
    "\004\000\002\024\002\000\002\025\003\000\002\025\003" +
    "\000\002\027\007\000\002\027\005\000\002\027\007\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\023\012\000" +
    "\002\023\012\000\002\023\011\000\002\026\006\000\002" +
    "\026\004\000\002\026\002\000\002\013\004\000\002\013" +
    "\005\000\002\013\002\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\016\011\000\002\016\015\000\002" +
    "\017\011\000\002\015\005\000\002\015\004\000\002\015" +
    "\003\000\002\020\007\000\002\020\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\010\006\000" +
    "\002\010\007\000\002\022\006\000\002\022\005\000\002" +
    "\014\005\000\002\014\003\000\002\012\007\000\002\002" +
    "\005\000\002\002\005\000\002\002\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\012\002\ufffe\020\006\021\013\022\011\001" +
    "\002\000\004\002\226\001\002\000\012\002\ufffe\020\006" +
    "\021\013\022\011\001\002\000\004\006\217\001\002\000" +
    "\012\002\ufffd\020\ufffd\021\ufffd\022\ufffd\001\002\000\012" +
    "\002\ufffc\020\ufffc\021\ufffc\022\ufffc\001\002\000\004\020" +
    "\210\001\002\000\004\002\001\001\002\000\004\020\014" +
    "\001\002\000\012\006\016\010\015\011\020\016\017\001" +
    "\002\000\010\006\027\017\026\020\030\001\002\000\006" +
    "\007\uffe7\021\050\001\002\000\004\020\022\001\002\000" +
    "\012\002\ufffa\020\ufffa\021\ufffa\022\ufffa\001\002\000\004" +
    "\011\046\001\002\000\010\010\023\011\ufff6\016\024\001" +
    "\002\000\010\006\027\017\026\020\030\001\002\000\004" +
    "\020\022\001\002\000\004\011\ufff8\001\002\000\016\004" +
    "\uffef\005\uffef\007\uffef\011\uffef\012\uffef\013\uffef\001\002" +
    "\000\010\006\027\017\026\020\030\001\002\000\016\004" +
    "\uffee\005\uffee\007\uffee\011\uffee\012\uffee\013\uffee\001\002" +
    "\000\010\004\041\011\ufff7\012\040\001\002\000\016\004" +
    "\ufff3\005\034\007\ufff3\011\ufff3\012\ufff3\013\035\001\002" +
    "\000\016\004\ufff0\005\ufff0\007\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\001\002\000\010\006\027\017\026\020\030\001\002" +
    "\000\010\006\027\017\026\020\030\001\002\000\016\004" +
    "\ufff1\005\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\001\002" +
    "\000\016\004\ufff2\005\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\001\002\000\010\006\027\017\026\020\030\001\002" +
    "\000\010\006\027\017\026\020\030\001\002\000\016\004" +
    "\ufff5\005\034\007\ufff5\011\ufff5\012\ufff5\013\035\001\002" +
    "\000\016\004\ufff4\005\034\007\ufff4\011\ufff4\012\ufff4\013" +
    "\035\001\002\000\010\004\041\007\045\012\040\001\002" +
    "\000\016\004\uffed\005\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\001\002\000\012\002\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\001\002\000\004\007\054\001\002\000\004\020\051\001" +
    "\002\000\006\007\uffe8\016\052\001\002\000\006\007\uffe7" +
    "\021\050\001\002\000\004\007\uffe9\001\002\000\004\014" +
    "\055\001\002\000\020\015\uffe4\020\062\021\057\023\073" +
    "\024\070\026\060\027\065\001\002\000\020\015\uffe4\020" +
    "\062\021\057\023\073\024\070\026\060\027\065\001\002" +
    "\000\004\020\170\001\002\000\004\006\162\001\002\000" +
    "\004\011\161\001\002\000\006\006\116\010\156\001\002" +
    "\000\020\015\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\001\002\000\020\015\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\026\uffe1\027\uffe1\001\002\000\004\006" +
    "\136\001\002\000\020\015\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\001\002\000\020\015\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\001\002" +
    "\000\004\006\132\001\002\000\020\015\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\001\002\000\004" +
    "\015\131\001\002\000\012\006\077\017\074\020\100\025" +
    "\076\001\002\000\022\004\uffc4\005\uffc4\007\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\016\uffc4\033\uffc4\001\002\000\022\004" +
    "\uffc9\005\110\007\uffc9\011\uffc9\012\uffc9\013\111\016\uffc9" +
    "\033\uffc9\001\002\000\004\006\127\001\002\000\012\006" +
    "\077\017\074\020\100\025\076\001\002\000\024\004\uffc3" +
    "\005\uffc3\006\116\007\uffc3\011\uffc3\012\uffc3\013\uffc3\016" +
    "\uffc3\033\uffc3\001\002\000\022\004\uffc5\005\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\016\uffc5\033\uffc5\001\002\000" +
    "\022\004\uffc6\005\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\016\uffc6\033\uffc6\001\002\000\010\004\105\011\106\012" +
    "\104\001\002\000\012\006\077\017\074\020\100\025\076" +
    "\001\002\000\012\006\077\017\074\020\100\025\076\001" +
    "\002\000\004\015\uffe5\001\002\000\022\004\uffcb\005\110" +
    "\007\uffcb\011\uffcb\012\uffcb\013\111\016\uffcb\033\uffcb\001" +
    "\002\000\012\006\077\017\074\020\112\025\076\001\002" +
    "\000\012\006\077\017\074\020\112\025\076\001\002\000" +
    "\022\004\uffc3\005\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\016\uffc3\033\uffc3\001\002\000\022\004\uffc7\005\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\016\uffc7\033\uffc7\001\002" +
    "\000\022\004\uffc8\005\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\016\uffc8\033\uffc8\001\002\000\022\004\uffca\005\110" +
    "\007\uffca\011\uffca\012\uffca\013\111\016\uffca\033\uffca\001" +
    "\002\000\014\006\077\007\117\017\074\020\100\025\076" +
    "\001\002\000\022\004\uffcf\005\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\016\uffcf\033\uffcf\001\002\000\004\007\124" +
    "\001\002\000\012\004\105\007\uffcd\012\104\016\122\001" +
    "\002\000\012\006\077\017\074\020\100\025\076\001\002" +
    "\000\004\007\uffce\001\002\000\022\004\uffd0\005\uffd0\007" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\016\uffd0\033\uffd0\001\002" +
    "\000\010\004\105\007\126\012\104\001\002\000\022\004" +
    "\uffc1\005\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\016\uffc1" +
    "\033\uffc1\001\002\000\004\007\130\001\002\000\022\004" +
    "\uffc2\005\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\016\uffc2" +
    "\033\uffc2\001\002\000\012\002\uffec\020\uffec\021\uffec\022" +
    "\uffec\001\002\000\012\006\077\017\074\020\100\025\076" +
    "\001\002\000\010\004\105\007\134\012\104\001\002\000" +
    "\004\011\135\001\002\000\020\015\uffcc\020\uffcc\021\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\027\uffcc\001\002\000\016\006" +
    "\077\017\074\020\100\025\076\031\142\032\141\001\002" +
    "\000\004\007\146\001\002\000\010\004\105\012\104\033" +
    "\144\001\002\000\016\006\077\017\074\020\100\025\076" +
    "\031\142\032\141\001\002\000\004\007\uffd8\001\002\000" +
    "\004\007\uffd9\001\002\000\012\006\077\017\074\020\100" +
    "\025\076\001\002\000\010\004\105\007\uffda\012\104\001" +
    "\002\000\004\014\147\001\002\000\020\015\uffe4\020\062" +
    "\021\057\023\073\024\070\026\060\027\065\001\002\000" +
    "\004\015\151\001\002\000\022\015\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\152\001\002\000" +
    "\004\014\153\001\002\000\020\015\uffe4\020\062\021\057" +
    "\023\073\024\070\026\060\027\065\001\002\000\004\015" +
    "\155\001\002\000\020\015\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\001\002\000\012\006\077\017" +
    "\074\020\100\025\076\001\002\000\010\004\105\011\160" +
    "\012\104\001\002\000\020\015\uffd2\020\uffd2\021\uffd2\023" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\001\002\000\020\015\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\026\uffde\027\uffde\001" +
    "\002\000\016\006\077\017\074\020\100\025\076\031\142" +
    "\032\141\001\002\000\004\007\164\001\002\000\004\014" +
    "\165\001\002\000\020\015\uffe4\020\062\021\057\023\073" +
    "\024\070\026\060\027\065\001\002\000\004\015\167\001" +
    "\002\000\020\015\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\001\002\000\010\010\171\011\173\016" +
    "\172\001\002\000\012\006\077\017\074\020\100\025\076" +
    "\001\002\000\004\020\174\001\002\000\020\015\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\001\002" +
    "\000\010\010\177\011\uffd3\016\200\001\002\000\004\011" +
    "\176\001\002\000\020\015\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\001\002\000\012\006\077\017" +
    "\074\020\100\025\076\001\002\000\004\020\174\001\002" +
    "\000\004\011\uffd5\001\002\000\010\004\105\011\uffd4\012" +
    "\104\001\002\000\010\004\105\011\204\012\104\001\002" +
    "\000\020\015\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\026" +
    "\uffd1\027\uffd1\001\002\000\004\015\uffe6\001\002\000\010" +
    "\004\041\011\207\012\040\001\002\000\012\002\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\001\002\000\004\006\211\001\002" +
    "\000\006\007\uffe7\021\050\001\002\000\004\007\213\001" +
    "\002\000\004\014\214\001\002\000\020\015\uffe4\020\062" +
    "\021\057\023\073\024\070\026\060\027\065\001\002\000" +
    "\004\015\216\001\002\000\012\002\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\001\002\000\006\007\uffe7\021\050\001\002\000" +
    "\004\007\221\001\002\000\004\014\222\001\002\000\020" +
    "\015\uffe4\020\062\021\057\023\073\024\070\026\060\027" +
    "\065\001\002\000\004\015\224\001\002\000\012\002\uffea" +
    "\020\uffea\021\uffea\022\uffea\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\014\023\006\024\011\025\004\027\007\031" +
    "\003\001\001\000\002\001\001\000\012\023\006\024\224" +
    "\025\004\027\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\205\006" +
    "\031\007\032\001\001\000\004\026\046\001\001\000\004" +
    "\030\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\030\006\031\007\032\001\001" +
    "\000\004\030\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\043\006\031\007\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\036\001\001\000\004\007\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\042\007" +
    "\032\001\001\000\006\006\041\007\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\066\011\055\012\065" +
    "\013\071\016\070\017\062\020\063\022\060\001\001\000" +
    "\022\010\066\011\055\012\065\013\204\016\070\017\062" +
    "\020\063\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\102\003\074\004\101\022\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\124\003\074\004\101\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\114\004\101\022\100\001\001\000" +
    "\010\003\106\004\101\022\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\113\001\001\000\004\004" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\120\003\074\004" +
    "\101\014\117\022\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\120\003\074\004" +
    "\101\014\122\022\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\132" +
    "\003\074\004\101\022\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\137\003\074" +
    "\004\101\015\136\022\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\137\003\074\004\101\015\142" +
    "\022\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\144\003\074\004\101\022\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\066\011\055\012" +
    "\065\013\147\016\070\017\062\020\063\022\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\066\011\055\012\065\013\153\016\070\017\062" +
    "\020\063\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\156\003\074\004\101\022\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\137\003\074\004\101\015\162\022\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\066\011" +
    "\055\012\065\013\165\016\070\017\062\020\063\022\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\202\003\074\004\101\022\100\001\001" +
    "\000\004\021\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\201" +
    "\003\074\004\101\022\100\001\001\000\004\021\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\066\011" +
    "\055\012\065\013\214\016\070\017\062\020\063\022\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\010\066\011\055\012\065\013\222\016\070\017\062\020" +
    "\063\022\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



			public String afficheTDSetAST(){
				String s="";
				action_obj.tds.tri();
				return "\n\n TDS :"+action_obj.tds.afficheTDS()+"\n\n -----------------------------\n\n AST:\n"+NoeudElement.afficheLesFils(action_obj.ast,action_obj.tds,s)+"\n";
			}
			public TDS getTDS(){
				return action_obj.tds;
			}
			
			public NoeudElement getAST(){
				return action_obj.ast;
			}
			
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


			//TDS principale
			TDS tds=new TDS();

			//AST la racine 
			NoeudElement ast=new NRacine();

			//Compteur de SCOPE
			int scope;

			//Compteur de Rang
			int rang;

			//Compteur cpt_id
			int cpt_tdsId=0;

			//ValeurAttributDeclaration
			int atomeGlob=0;

			//Valeur affectation
			int atome=0;

			//Compteur parametre de fonction
			int cpt_param=0;

			//Compteur variable local ds fonction

			int cpt_var_loc=0;

			//le dernier id Fonct
			int idFonct=-1;

			//le dernier type de retour de fonction
			String lastType="void";

			//le dernier nom de fonction
			String lfonctName="main";
			
			//list contenant des listes d'instructionsinstructions
			NOutil instruction=new NOutil();
			
			//list contenant des fonctions 
			NOutil fonction=new NOutil();
			
			//tdstempo
			TDS tdsTempo=new TDS();
			
			//tds tempo pour varloc
			
			TDS tdsTempoParam=new TDS();
			
			NOutil boiteAtome=new NOutil();
			
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atome ::= PO expression PF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                  				RESULT=((NExpression)e);
                 				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atome ::= READ PO PF 
            {
              Object RESULT =null;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atome ::= IDF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
		 			if(tds.searchVariable(((String)e)) instanceof Variable){
						NVariable a=new NVariable(tds.searchVariable(((String)e)).getId());
						boiteAtome.ajouter1fils(a);
						RESULT=a;
					}
					if(tds.searchVariable(((String)e)) instanceof Vlocale){
						NVlocale a=new NVlocale(((String)e));
						boiteAtome.ajouter1fils(a);
						RESULT=a;
					}
					if(tds.searchVariable(((String)e)) instanceof Parametre){
						NVParam a=new NVParam(((String)e));
						boiteAtome.ajouter1fils(a);
						RESULT=a;
					}
	   			  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atome ::= NUM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT=new NConstant((Integer)e);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // facteur ::= appelfonction 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NAppelFonction ap = (NAppelFonction)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  				RESULT=ap;
                  				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // facteur ::= atome 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  		RESULT=e;
                  		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // facteur ::= facteur DIV atome 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  						RESULT=new NExpression(new NOperation(((NoeudElement)e1),"/",((NoeudElement)e2)));
                  						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // facteur ::= facteur MUL atome 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
										RESULT=new NExpression(new NOperation(((NoeudElement)e1),"*",((NoeudElement)e2)));
										
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= facteur 
            {
              NExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  			RESULT=new NExpression(((NoeudElement)e));
                  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression SUB facteur 
            {
              NExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NExpression e1 = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  								RESULT=new NExpression(new NOperation(((NoeudElement)e1),"-",((NoeudElement)e2)));
                  								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression ADD facteur 
            {
              NExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NExpression e1 = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
												RESULT=new NExpression(new NOperation(((NoeudElement)e1),"+",((NoeudElement)e2)));
												
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ecriture ::= WRITE PO expression PF PV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecriture",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listparametre ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                					RESULT=e;
                					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listparametre",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listparametre ::= expression VIRG listparametre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
														NListeParam lp=new NListeParam();
														System.out.println(((NoeudElement)e).afficherNoeud(tds));
														lp.addParam(((NoeudElement)e));
														lp.addParam(((NoeudElement)l));
														RESULT=lp;
														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listparametre",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // appelfonction ::= IDF PO PF 
            {
              NAppelFonction RESULT =null;
		int nomFonctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nomFonctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String nomFonct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
                 										TdsElement te=((Fonction)tds.searchFonction(((String)nomFonct)));
														int val=((Integer)((TdsElement)te).getId());
														RESULT=new NAppelFonction(val);

                 						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appelfonction",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // appelfonction ::= IDF PO listparametre PF 
            {
              NAppelFonction RESULT =null;
		int nomFonctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomFonctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nomFonct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
														TdsElement te=((Fonction)tds.searchFonction(((String)nomFonct)));
														int val=((Integer)((TdsElement)te).getId());
														NAppelFonction af=new NAppelFonction(val);
														
														if(l instanceof NListeParam){
															for(int i=0;i<=((NListeParam)l).listeParam.size()-1;i++){
																af.ajouter1fils(((NListeParam)l).listeParam.get(i));
															}
														}else{
																af.ajouter1fils(((NoeudElement)l));
															}
														
														
														
														RESULT=af;

														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appelfonction",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // affectation ::= INT IDF EGAL expression PV 
            {
              NAffectation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
             									 tds.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)lastType),((Integer)scope),((Integer)cpt_var_loc),0));
              									 cpt_tdsId++; 
												((Vlocale)tds.searchVariable(((String)i))).setVal(atome);
												int val=((Vlocale)tds.searchVariable(((String)i))).getId();
												NVlocale v=new NVlocale(val,scope);
												NAffectation a=new NAffectation(v,((NExpression)e),"=");
												cpt_var_loc++;
												RESULT=a;
               									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // affectation ::= IDF EGAL expression PV 
            {
              NAffectation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
													if(tds.searchVariable(((String)i)) instanceof Variable){
														((Variable)tds.searchVariable(((String)i))).setVal(atome);
														int val=((Variable)tds.searchVariable(((String)i))).getId();
														NVariable v=new NVariable(val);
														NAffectation a=new NAffectation(v,((NExpression)e),"=");
														RESULT=a;
													}
													if(tds.searchVariable(((String)i)) instanceof Vlocale){
														((Vlocale)tds.searchVariable(((String)i))).setVal(atome);
														int val=((Vlocale)tds.searchVariable(((String)i))).getId();
														NVlocale v=new NVlocale(val,scope);
														NAffectation a=new NAffectation(v,((NExpression)e),"=");
														RESULT=a;
													}
													if(tds.searchVariable(((String)i)) instanceof Parametre){
														((Parametre)tds.searchVariable(((String)i))).setVal(atome);
														int val=((Parametre)tds.searchVariable(((String)i))).getId();
														NVParam v=new NVParam(val,scope);
														NAffectation a=new NAffectation(v,((NExpression)e),"=");
														RESULT=a;
													}
													
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // suitedeclaration ::= IDF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
								tdsTempo.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)lastType),((Integer)scope),((Integer)cpt_var_loc),0));
								int idff=cpt_tdsId;
								NVlocale a=new NVlocale(((String)i),cpt_tdsId);     
								cpt_var_loc++;
								RESULT=a;				                    
                    			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclaration",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // suitedeclaration ::= IDF EGAL expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                    								tdsTempo.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)lastType),((Integer)scope),((Integer)cpt_var_loc),0));
													int idff=tds.searchVloc(((String)i)).getId();
													NVlocale a=new NVlocale(((String)i),cpt_tdsId);     
													cpt_var_loc++;
													NAffectation na=new NAffectation(((NoeudElement)a),e,"=");
													RESULT=na;                								
                    							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclaration",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // suitedeclaration ::= IDF VIRG suitedeclaration 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
														NEnsDec ens=new NEnsDec();
														tdsTempo.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)lastType),((Integer)scope),((Integer)cpt_var_loc),0));
														int idff=cpt_tdsId;
														NVlocale a=new NVlocale(((String)i),cpt_tdsId);     
												
														ens.ajouter1fils(a);
														ens.ajouter1fils(((NoeudElement)sd));
														cpt_var_loc++;
														RESULT =ens;
														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclaration",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ensembledeclaration ::= INT IDF PV 
            {
              NoeudElement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                      						tdsTempo.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)t),((Integer)scope),((Integer)cpt_var_loc),0));
        									int idff=cpt_tdsId;
											NVlocale a=new NVlocale(((String)i),cpt_tdsId);     
								
                      						cpt_var_loc++;                       						
                      	 					RESULT=((NVlocale)a);
                       
                       						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ensembledeclaration",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ensembledeclaration ::= INT IDF VIRG suitedeclaration PV 
            {
              NoeudElement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object sd = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
																	for(int j=0;j<=tdsTempo.getTable().size()-1;j++){
																		((Vlocale) tdsTempo.getTable().get(j)).setType(((String)t));            
																	}
																	
																	
																	tdsTempo.ajoute(new Vlocale(cpt_tdsId,((String)i),((String)t),((Integer)scope),((Integer)cpt_var_loc),0)); 
																	int idff=cpt_tdsId;
																	NVlocale a=new NVlocale(((String)i),cpt_tdsId);                  												
                       												NEnsDec enssdec=new NEnsDec();
                       												if(sd instanceof NEnsDec){                       												
                       													((NEnsDec)sd).ajouter1fils(a);
                       													NEnsDec ensdec=((NEnsDec)sd);
                       													enssdec=((NEnsDec)ensdec);
                       												}
                       												if(sd instanceof NVlocale){
                       													NEnsDec ensdec=new NEnsDec();
                       													ensdec.ajouter1fils(a);
                       													ensdec.ajouter1fils(((NVlocale)sd));
                       													enssdec=((NEnsDec)ensdec);
                       													}
                       												if(sd instanceof NAffectation){
                       													NEnsDec ensdec=new NEnsDec();
                       													ensdec.ajouter1fils(a);
                       													ensdec.ajouter1fils(((NAffectation)sd));
                       													enssdec=((NEnsDec)ensdec);
                       													}
                       													RESULT=((NEnsDec)enssdec);
																	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ensembledeclaration",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expressionbooleenne ::= BOOLEEN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                      			RESULT=new NBoolean(((String)b));
                      			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionbooleenne",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expressionbooleenne ::= NOT expressionbooleenne 
            {
              Object RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object eb = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                      							RESULT=new NExpression(((NoeudElement)eb));
                      							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionbooleenne",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressionbooleenne ::= expression OPERATEURCOMPARAISON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		NExpression e1 = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NExpression e2 = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=new NCondition(((NoeudElement)e1),((String)comp),((NoeudElement)e2));
																			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionbooleenne",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iteration ::= WHILE PO expressionbooleenne PF ACCO listinstruction ACCF 
            {
              Object RESULT =null;
		int expBoolleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int expBoolright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object expBool = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
																				RESULT=new NWhile(((NoeudElement)expBool),((NoeudElement)l));
																				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iteration",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conditionnelle ::= IF PO expressionbooleenne PF ACCO listinstruction ACCF ELSE ACCO listinstruction ACCF 
            {
              Object RESULT =null;
		int expBoolleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int expBoolright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object expBool = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                 																										RESULT=new NIf(((NoeudElement)expBool),((NoeudElement)l1),((NoeudElement)l2));
                 																										
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conditionnelle ::= IF PO expressionbooleenne PF ACCO listinstruction ACCF 
            {
              Object RESULT =null;
		int expBoolleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int expBoolright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object expBool = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=new NIf(((NoeudElement)expBool),((NoeudElement)l));

																					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruction ::= appelfonction PV 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		NAppelFonction ap = (NAppelFonction)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                  						RESULT=ap;
                  						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruction ::= iteration 
            {
              Object RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  				RESULT=((NoeudElement)it);
                  				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruction ::= conditionnelle 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                  						RESULT=((NoeudElement)cond);
                  						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruction ::= ensembledeclaration 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NoeudElement decl = (NoeudElement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		    
                  							RESULT=((NoeudElement)decl);
                  							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= ecriture 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= affectation 
            {
              Object RESULT =null;
		int affleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int affright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NAffectation aff = (NAffectation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
									RESULT=aff;
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listinstruction ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listinstruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listinstruction ::= RETURN expression PV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		NExpression e = (NExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
                 							NReturn nr=new NReturn();
                 							nr.ajouter1fils(((NoeudElement)e));
                 							instruction.getInstructions().add(((NoeudElement)nr));
                 							RESULT=nr;
                 							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listinstruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listinstruction ::= instruction listinstruction 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
														instruction.getInstructions().add(((NoeudElement)inst));
														RESULT=new NInstruction(((NoeudElement)inst));
														
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listinstruction",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listdeclarationparametre ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listdeclarationparametre",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listdeclarationparametre ::= INT IDF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                           					tdsTempoParam.ajoute(new Parametre(((Integer)cpt_tdsId), ((String)i), 0, cpt_param, ((String)t),0));
											cpt_tdsId++;
											cpt_param++;
											
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listdeclarationparametre",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listdeclarationparametre ::= INT IDF VIRG listdeclarationparametre 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		tdsTempoParam.ajoute(new Parametre(((Integer)cpt_tdsId), ((String)i), ((Integer)scope), cpt_param, ((String)t),0));
																			cpt_tdsId++;
																			cpt_param++;
																			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listdeclarationparametre",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fonction ::= IDF PO listdeclarationparametre PF ACCO listinstruction ACCF 
            {
              NFonction RESULT =null;
		int nomFonctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomFonctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nomFonct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		          		
          																							scope=cpt_tdsId;
																									
																									 if(tdsTempo.getTable().size()>0){
																									 	for(int j=0;j<=tdsTempo.getTable().size()-1;j++){
																											cpt_tdsId++; 
																											Vlocale te=(Vlocale) tdsTempo.getTable().get(j);
																											te.setId(cpt_tdsId);
																											te.setScope(((Integer)scope));
																											tds.ajoute(te);             
																										}
																									 }
																									  tds.ajoute(new Fonction(((Integer)scope), ((String)nomFonct), ((Integer)cpt_param), tdsTempo.getTable().size(), "void"));
																										tdsTempo.getTable().clear();
																									 
																									  if(tdsTempoParam.getTable().size()>0){
																									 	for(int k=0;k<=tdsTempoParam.getTable().size()-1;k++){
																									 	Parametre par=(Parametre) tdsTempoParam.getTable().get(k);
																									 	par.setScope(((Integer)scope));
																									 	tds.ajoute(par); 
																									 	}
																									 }tdsTempoParam.getTable().clear();
																									 
																									 
																									 NFonction fonct=new NFonction(((Integer)cpt_tdsId));
																									 NBloc bloc=new NBloc();
																									 for(int i=0;i<=instruction.getInstructions().size()-1;i++){
																									 	bloc.ajouter1fils(((NoeudElement)instruction.getInstructions().get(i)));
																									 	
																									 }
																									
																									
																									

																									 cpt_tdsId++; 
																									 cpt_param=0;
																									 cpt_var_loc=0;
																									 instruction.initializeInstructions();
																									 fonct.ajouter1fils(bloc);
																									 fonction.ajouter1fils(fonct);
																									 RESULT=fonct;
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fonction ::= VOID IDF PO listdeclarationparametre PF ACCO listinstruction ACCF 
            {
              NFonction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int nomFonctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomFonctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nomFonct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
          																							scope=cpt_tdsId;
																									
																									 if(tdsTempo.getTable().size()>0){
																									 	for(int j=0;j<=tdsTempo.getTable().size()-1;j++){
																											cpt_tdsId++; 
																											Vlocale te=(Vlocale) tdsTempo.getTable().get(j);
																											te.setId(cpt_tdsId);
																											te.setScope(((Integer)scope));
																											tds.ajoute(te);             
																										}
																									 }
																									  tds.ajoute(new Fonction(((Integer)scope), ((String)nomFonct), ((Integer)cpt_param), tdsTempo.getTable().size(), ((String)v)));
																										tdsTempo.getTable().clear();
																									 
																									 
																									 NFonction fonct=new NFonction(((Integer)cpt_tdsId));
																									 NBloc bloc=new NBloc();
																									 for(int i=0;i<=instruction.getInstructions().size()-1;i++){
																									 	bloc.ajouter1fils(((NoeudElement)instruction.getInstructions().get(i)));
																									 	
																									 }
																									// if(l instanceof NReturn){
																									 //	bloc.ajouter1fils(((NReturn)l));
																									 //}
																									 cpt_tdsId++; 
																									 cpt_param=0;
																									 cpt_var_loc=0;
																									 instruction.initializeInstructions();
																									 fonct.ajouter1fils(bloc);
																									 fonction.ajouter1fils(fonct);
																									 RESULT=fonct;											 
																							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fonction ::= INT IDF PO listdeclarationparametre PF ACCO listinstruction ACCF 
            {
              NFonction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int nomFonctleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomFonctright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nomFonct = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
																									scope=cpt_tdsId;
																									
																									 	 if(tdsTempo.getTable().size()>0){
																									 	for(int j=0;j<=tdsTempo.getTable().size()-1;j++){
																											cpt_tdsId++; 
																											Vlocale te=(Vlocale) tdsTempo.getTable().get(j);
																											te.setId(cpt_tdsId);
																											te.setScope(((Integer)scope));
																											tds.ajoute(te);             
																										}
																									 }tdsTempo.getTable().clear();
		
		
																									if(tdsTempoParam.getTable().size()>0){
																									 	for(int k=0;k<=tdsTempoParam.getTable().size()-1;k++){
																									 	Parametre par=(Parametre) tdsTempoParam.getTable().get(k);
																									 	par.setScope(((Integer)scope));
																									 	tds.ajoute(par); 
																									 	}
																									 }tdsTempoParam.getTable().clear();
																									 
																									
																									 
																									 tds.ajoute(new Fonction(((Integer)scope), ((String)nomFonct), ((Integer)cpt_param), tdsTempo.getTable().size(), ((String)t)));
																									
																								
																									 
																									 NFonction fonct=new NFonction(((Integer)cpt_tdsId));
																									 NBloc bloc=new NBloc();
																									 for(int i=0;i<=instruction.getInstructions().size()-1;i++){
																									 	bloc.ajouter1fils(((NoeudElement)instruction.getInstructions().get(i)));
																									 	
																									 }
																									 
																									 
																									 cpt_tdsId++; 
																									 cpt_param=0;
																									 cpt_var_loc=0;
																									 instruction.initializeInstructions();
																									 fonct.ajouter1fils(bloc);
																									 fonction.ajouter1fils(fonct);
																									 RESULT=fonct;
																									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atomeGLOBALE ::= PO expressionGLOBALE PF 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atomeGLOBALE",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atomeGLOBALE ::= IDF 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        			int valeur=((Integer)((Variable)tds.searchVariable(((String)e),-1)).getVal());
                        			RESULT=new Integer(valeur);
                        			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atomeGLOBALE",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atomeGLOBALE ::= NUM 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
									RESULT=new Integer(e);
									
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atomeGLOBALE",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // facteurGLOBALE ::= atomeGLOBALE 
            {
              Object RESULT =null;
		int atomeglobleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int atomeglobright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer atomeglob = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        							RESULT=atomeglob;
                        							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteurGLOBALE",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // facteurGLOBALE ::= facteurGLOBALE DIV atomeGLOBALE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteurGLOBALE",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // facteurGLOBALE ::= facteurGLOBALE MUL atomeGLOBALE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteurGLOBALE",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressionGLOBALE ::= facteurGLOBALE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                        					 RESULT=e;
                        					 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionGLOBALE",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressionGLOBALE ::= expressionGLOBALE SUB facteurGLOBALE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionGLOBALE",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressionGLOBALE ::= expressionGLOBALE ADD facteurGLOBALE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expressionGLOBALE",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // suitedeclarationGLOBALE ::= IDF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                            		   RESULT=new Variable(((Integer)cpt_tdsId), ((String)i),0,"undefined");
                            		
                            		   
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclarationGLOBALE",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // suitedeclarationGLOBALE ::= IDF EGAL expressionGLOBALE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                             									RESULT=new Variable(((Integer)cpt_tdsId), ((String)i),((Integer)e),"undefined");
                             									
                            								   
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclarationGLOBALE",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // suitedeclarationGLOBALE ::= IDF VIRG suitedeclarationGLOBALE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sdgleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sdgright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object sdg = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 NOutil no=new NOutil(); 
																		  no.getList().add(new Variable(((Integer)cpt_tdsId), ((String)i), 0,"undefined"));
																		no.getList().add(((TdsElement)sdg));
																		RESULT=no;
																   
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suitedeclarationGLOBALE",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ensembledeclarationGLOBALE ::= INT IDF EGAL expressionGLOBALE PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                              												tds.ajoute(new Variable(((Integer)cpt_tdsId), ((String)i), ((Integer)e), ((String)t)));
                              												 cpt_tdsId++; 
                              											   
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ensembledeclarationGLOBALE",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ensembledeclarationGLOBALE ::= INT IDF PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
                              						tds.ajoute(new Variable(((Integer)cpt_tdsId), ((String)i), 0, ((String)t)));
                              						cpt_tdsId++; 
                              					  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ensembledeclarationGLOBALE",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ensembledeclarationGLOBALE ::= INT IDF VIRG suitedeclarationGLOBALE PV 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sdgleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sdgright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object sdg = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
 																							tds.ajoute(new Variable(((Integer)cpt_tdsId), ((String)i),0, ((String)t)));
																						   	cpt_tdsId++;
																							if(sdg instanceof NOutil){
																								for(int j=0;j<=((NOutil)sdg).getList().size()-1;j++){
																									Variable var=(Variable) ((NOutil)sdg).getList().get(j);
																									var.setType(t);
																									var.setId(cpt_tdsId);
																									tds.ajoute(var);
																									cpt_tdsId++;
																								}
																							}
																							if(sdg instanceof Variable){
																							Variable v=((Variable)sdg);
																							v.setType(t);
																							v.setId(cpt_tdsId);
																							tds.ajoute(v);
																							cpt_tdsId++;
																							}
																						  
																						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ensembledeclarationGLOBALE",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commande ::= ensembledeclarationGLOBALE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commande",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // commande ::= fonction 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		NFonction f = (NFonction)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
							ast.ajouter1fils(((NFonction)f));
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("commande",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listcommande ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listcommande",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listcommande ::= commande listcommande 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listcommande",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programme ::= listcommande 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

