/*
 * analyseur syntaxique  du :
 * Projet interpreteur
 * 
 *
 * (c) 2014-2015
 * ---- Grammaire mini interpr√©teur
 * Auteurs : NDIAYE & THIAM
 */ 

package fr.ul.miage.analyse.generated;



/* la grammaire */

terminal ADD, MUL, PO, PF, EGAL, PV, SUB, DIV, ACCO, ACCF, VIRG;
terminal NUM;
terminal IDF, INT, VOID, RETURN, WRITE, READ;
terminal  WHILE, IF, ELSE, BOOLEEN, NOT, OPERATEURCOMPARAISON;

non terminal expression, facteur, atome;
non terminal expressionGLOBALE, facteurGLOBALE, atomeGLOBALE;
non terminal affectation;
non terminal instruction;
non terminal  ecriture;
non terminal  listinstruction, listparametre;
non terminal  expressionbooleenne;
non terminal  conditionnelle, iteration;
non terminal  ensembledeclaration, suitedeclaration;
non terminal  appelfonction;


non terminal  fonction;
non terminal listcommande, commande;
non terminal listdeclarationparametre;
non terminal ensembledeclarationGLOBALE, suitedeclarationGLOBALE;

non terminal  programme;


programme       ::= listcommande
                    ;
          
listcommande    ::= commande listcommande
                  |
                  ;

commande ::=    fonction
            |   ensembledeclarationGLOBALE
            ;

ensembledeclarationGLOBALE  ::=    INT:t IDF:i VIRG suitedeclarationGLOBALE PV
                              |    INT:t IDF:i PV
                              |    INT:t IDF:i EGAL expressionGLOBALE:e PV
                              ;

suitedeclarationGLOBALE   ::=   IDF:i VIRG suitedeclarationGLOBALE 
                            |   IDF:i EGAL expressionGLOBALE:e
                            |   IDF:i
                            ;

expressionGLOBALE      ::=  expressionGLOBALE:e1  ADD facteurGLOBALE:e2
                        |   expressionGLOBALE:e1  SUB  facteurGLOBALE:e2 
                        |   facteurGLOBALE:e 
                        ;

facteurGLOBALE         ::=  facteurGLOBALE:e1  MUL  atomeGLOBALE:e2 
                        |   facteurGLOBALE:e1  DIV  atomeGLOBALE:e2
                        |   atomeGLOBALE:e
                        ;

atomeGLOBALE           ::=  NUM:e
                        |   IDF:e
                        |   PO expressionGLOBALE:e PF
                        ;


fonction ::= INT:t  IDF:nomFonct  PO  listdeclarationparametre:p  PF  ACCO  listinstruction:l  ACCF
          |  VOID:v IDF:nomFonct PO listdeclarationparametre PF ACCO listinstruction:l ACCF
          |  IDF:nomFonct PO listdeclarationparametre PF ACCO listinstruction:l ACCF
          ;

listdeclarationparametre ::= INT IDF VIRG listdeclarationparametre
                           |  INT IDF
                           |  
                           ;

listinstruction ::= instruction:inst listinstruction:l
                 |  RETURN expression:e PV
                 |  
                 ;

instruction     ::= affectation:aff
                  | ecriture:ec
                  | ensembledeclaration:decl
                  | conditionnelle:cond
                  | iteration:it
                  | appelfonction:ap PV
                  ;

conditionnelle ::= IF PO expressionbooleenne:expBool PF ACCO listinstruction:l ACCF
                 | IF PO expressionbooleenne:expBool PF ACCO listinstruction:l1 ACCF ELSE ACCO listinstruction:l2 ACCF 
                  
                 ;

iteration ::= WHILE PO expressionbooleenne:expBool PF ACCO listinstruction:l ACCF
            ;


expressionbooleenne ::= expression:e1 OPERATEURCOMPARAISON:comp expression:e2
                      | NOT expressionbooleenne
                      | BOOLEEN:b
                      ;

ensembledeclaration  ::=    INT:t  IDF:i  VIRG suitedeclaration PV
                       |    INT:t IDF:i PV
                       ;

suitedeclaration ::=    IDF:i VIRG suitedeclaration 
                    |   IDF:i EGAL expression:e
                    |   IDF:i
                    ;
            
affectation   ::=   IDF:i  EGAL expression:e PV
               |    INT IDF:i  EGAL expression:e PV
                  ;

appelfonction ::=  IDF:nomFonct PO listparametre:l PF
                 | IDF:nomFonct PO PF
                  ;

listparametre ::=  expression:e VIRG listparametre:l
                |  expression:e  
                ;
          
ecriture        ::= WRITE PO expression:e PF PV
                ;

            
expression      ::= expression:e1  ADD facteur:e2
                  | expression:e1  SUB  facteur:e2 
                  | facteur:e 
                  ;

facteur         ::= facteur:e1  MUL  atome:e2 
                  | facteur:e1  DIV  atome:e2
                  | atome:e
                  | appelfonction:ap
                  ;

atome           ::= NUM:e
                  | IDF:e
                  | READ PO PF
                  | PO expression:e PF
                  ;